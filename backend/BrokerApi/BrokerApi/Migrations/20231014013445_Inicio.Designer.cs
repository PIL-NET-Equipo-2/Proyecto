// <auto-generated />
using System;
using BrokerApi.Repositories;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BrokerApi.Migrations
{
    [DbContext(typeof(BrokerContext))]
    [Migration("20231014013445_Inicio")]
    partial class Inicio
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BrokerApi.Models.AccionModel", b =>
                {
                    b.Property<int>("IdAccion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdAccion"));

                    b.Property<string>("Empresa")
                        .IsRequired()
                        .HasColumnType("varchar(15)");

                    b.Property<DateTime?>("FechaAlta")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FechaBaja")
                        .HasColumnType("datetime");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("Precio")
                        .HasColumnType("decimal(11,2)");

                    b.Property<string>("Simbolo")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("IdAccion");

                    b.ToTable("Acciones");
                });

            modelBuilder.Entity("BrokerApi.Models.CompraModel", b =>
                {
                    b.Property<int>("IdCompra")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCompra"));

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Fecha")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FechaBaja")
                        .HasColumnType("datetime");

                    b.Property<int?>("IdAccion")
                        .HasColumnType("int");

                    b.Property<int?>("IdCuenta")
                        .HasColumnType("int");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(11,2)");

                    b.HasKey("IdCompra");

                    b.HasIndex("IdAccion");

                    b.HasIndex("IdCuenta");

                    b.ToTable("Compras");
                });

            modelBuilder.Entity("BrokerApi.Models.CuentaModel", b =>
                {
                    b.Property<int>("IdCuenta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCuenta"));

                    b.Property<string>("Cbu")
                        .IsRequired()
                        .HasColumnType("varchar(15)");

                    b.Property<bool>("EstaHabilitada")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("FechaAlta")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FechaBaja")
                        .HasColumnType("datetime");

                    b.Property<int?>("IdPersona")
                        .HasColumnType("int");

                    b.Property<decimal>("Saldo")
                        .HasColumnType("decimal(11,2)");

                    b.HasKey("IdCuenta");

                    b.HasIndex("IdPersona");

                    b.ToTable("Cuentas");
                });

            modelBuilder.Entity("BrokerApi.Models.LocalidadModel", b =>
                {
                    b.Property<int>("IdLocalidad")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdLocalidad"));

                    b.Property<DateTime?>("FechaAlta")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FechaBaja")
                        .HasColumnType("datetime");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(15)");

                    b.HasKey("IdLocalidad");

                    b.ToTable("Localidades");
                });

            modelBuilder.Entity("BrokerApi.Models.PersonaModel", b =>
                {
                    b.Property<int>("IdPersona")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPersona"));

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("varchar(15)");

                    b.Property<string>("Contrasenia")
                        .IsRequired()
                        .HasColumnType("varchar(15)");

                    b.Property<string>("Dni")
                        .IsRequired()
                        .HasColumnType("varchar(15)");

                    b.Property<DateTime?>("FechaAlta")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FechaBaja")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("date");

                    b.Property<int?>("IdLocalidad")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(15)");

                    b.Property<string>("Usuario")
                        .IsRequired()
                        .HasColumnType("varchar(15)");

                    b.HasKey("IdPersona");

                    b.HasIndex("IdLocalidad");

                    b.ToTable("Personas");
                });

            modelBuilder.Entity("BrokerApi.Models.RolModel", b =>
                {
                    b.Property<int>("IdRol")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdRol"));

                    b.Property<DateTime?>("FechaAlta")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FechaBaja")
                        .HasColumnType("datetime");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(15)");

                    b.HasKey("IdRol");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("PersonaModelRolModel", b =>
                {
                    b.Property<int>("PersonasIdPersona")
                        .HasColumnType("int");

                    b.Property<int>("RolesIdRol")
                        .HasColumnType("int");

                    b.HasKey("PersonasIdPersona", "RolesIdRol");

                    b.HasIndex("RolesIdRol");

                    b.ToTable("PersonaModelRolModel");
                });

            modelBuilder.Entity("BrokerApi.Models.CompraModel", b =>
                {
                    b.HasOne("BrokerApi.Models.AccionModel", "IdAccionNavigation")
                        .WithMany("Compras")
                        .HasForeignKey("IdAccion");

                    b.HasOne("BrokerApi.Models.CuentaModel", "IdCuentaNavigation")
                        .WithMany("Compras")
                        .HasForeignKey("IdCuenta");

                    b.Navigation("IdAccionNavigation");

                    b.Navigation("IdCuentaNavigation");
                });

            modelBuilder.Entity("BrokerApi.Models.CuentaModel", b =>
                {
                    b.HasOne("BrokerApi.Models.PersonaModel", "IdPersonaNavigation")
                        .WithMany("Cuentas")
                        .HasForeignKey("IdPersona");

                    b.Navigation("IdPersonaNavigation");
                });

            modelBuilder.Entity("BrokerApi.Models.PersonaModel", b =>
                {
                    b.HasOne("BrokerApi.Models.LocalidadModel", "IdLocalidadNavigation")
                        .WithMany("Personas")
                        .HasForeignKey("IdLocalidad");

                    b.Navigation("IdLocalidadNavigation");
                });

            modelBuilder.Entity("PersonaModelRolModel", b =>
                {
                    b.HasOne("BrokerApi.Models.PersonaModel", null)
                        .WithMany()
                        .HasForeignKey("PersonasIdPersona")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BrokerApi.Models.RolModel", null)
                        .WithMany()
                        .HasForeignKey("RolesIdRol")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BrokerApi.Models.AccionModel", b =>
                {
                    b.Navigation("Compras");
                });

            modelBuilder.Entity("BrokerApi.Models.CuentaModel", b =>
                {
                    b.Navigation("Compras");
                });

            modelBuilder.Entity("BrokerApi.Models.LocalidadModel", b =>
                {
                    b.Navigation("Personas");
                });

            modelBuilder.Entity("BrokerApi.Models.PersonaModel", b =>
                {
                    b.Navigation("Cuentas");
                });
#pragma warning restore 612, 618
        }
    }
}
